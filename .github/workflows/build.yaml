name: C++ CI

on: [push]

jobs:
  build:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            compiler: gcc
            gcc: 13
            triplet: x64-linux

    steps:
      - uses: actions/checkout@v3

      - name: add ssh private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
             ${{ secrets.SSH_KEY_SUBMODULE_AI_OMNISCOPE_V2 }}

      - name: checkout submodules
        run: git submodule update --init --recursive

      - name: setup
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true

      - name: install deps
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ !contains(matrix.os, 'windows' ) }}
        with:
          packages: libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
          version: 1.0

      - name: setup prerequisites
        if: ${{ !contains(matrix.os, 'windows' ) }}
        shell: bash
        run: |
          sudo apt update
          sudo apt install autoconf libudev-dev

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: CMake configure
        if: ${{ !contains(matrix.os, 'windows' ) }}
        run: cmake -S . -B ./build -DCMAKE_BUILD_TYPE="Release"

      - name: build
        if: ${{ !contains(matrix.os, 'windows' ) }}
        run: cmake --build ./build

      - name: CMake configure
        if: ${{ contains(matrix.os, 'windows' ) }}
        run: cmake -S . -B ./build -DVCPKG_TARGET_TRIPLET="x64-windows-static"

      - name: build
        if: ${{ contains(matrix.os, 'windows' ) }}
        run: cmake --build ./build --config Release

      - name: upload executable (Linux)
        uses: actions/upload-artifact@v4
        if: ${{ !contains(matrix.os, 'windows' ) }}
        with:
          name: ${{ github.event.repository.name }}-linux
          path: |
            build/OmniView
            config/config.json
            languages/Deutsch.json

      - name: upload executable (Windows)
        uses: actions/upload-artifact@v4
        if: ${{ contains(matrix.os, 'windows' ) }}
        with:
          name: ${{ github.event.repository.name }}-windows
          path: |
            build/Release/OmniView.exe
            config/config.json
            languages/Deutsch.json

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: display name of downloaded-artifacts
        run: ls -R

      - name: zip release files (Ubuntu)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r ${{github.event.repository.name}}-${{ github.ref_name }}-ubuntu.zip
                build/OmniView
                config/config.json
                languages/Deutsch.json

      - name: zip release files (Windows)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r ${{github.event.repository.name}}-${{ github.ref_name }}-windows.zip
                build/Release/OmniView.exe
                config/config.json
                languages/Deutsch.json

      - name: create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/Release/OmniView.exe
            config/config.json
            languages/Deutsch.json
            ${{github.event.repository.name}}-${{ github.ref_name }}-ubuntu.zip
            ${{github.event.repository.name}}-${{ github.ref_name }}-windows.zip
